const fs = require('fs').promises;
const path = require('path');

/**
 * –°–ö–†–ò–ü–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –£–°–¢–ê–ù–û–í–ö–ò VAADIN MVC –ü–†–û–ï–ö–¢–ê
 */

console.log('üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Vaadin MVC –ø—Ä–æ–µ–∫—Ç–∞...\n');

async function createDirectoryStructure() {
    const dirs = [
        'data',
        'frontend',
        'frontend/dist',
        'scripts'
    ];

    console.log('üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫...');

    for (const dir of dirs) {
        try {
            await fs.mkdir(dir, { recursive: true });
            console.log(`   ‚úÖ ${dir}/`);
        } catch (error) {
            console.log(`   ‚ö†Ô∏è  ${dir}/ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)`);
        }
    }
}

async function checkFiles() {
    const requiredFiles = [
        { file: 'server.js', description: '–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä' },
        { file: 'package.json', description: '–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞' },
        { file: 'data/database.json', description: 'JSON –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö' }
    ];

    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');

    for (const { file, description } of requiredFiles) {
        try {
            await fs.access(file);
            console.log(`   ‚úÖ ${file} - ${description}`);
        } catch (error) {
            console.log(`   ‚ùå ${file} - –û–¢–°–£–¢–°–¢–í–£–ï–¢! ${description}`);
        }
    }
}

async function checkWebComponent() {
    console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞...');

    try {
        await fs.access('frontend/dist/virtualized-table.js');
        console.log('   ‚úÖ frontend/dist/virtualized-table.js –Ω–∞–π–¥–µ–Ω');
    } catch (error) {
        console.log('   ‚ùå frontend/dist/virtualized-table.js –ù–ï –ù–ê–ô–î–ï–ù!');
        console.log('   üìù –ù–ï–û–ë–•–û–î–ò–ú–û: –ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤–∞—à –≤–µ–±-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤ frontend/dist/');
        console.log('      cp virtualized-table.js frontend/dist/');
    }
}

async function generateTestFile() {
    console.log('\nüß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞...');

    const testScript = `const http = require('http');

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Vaadin MVC –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
function testServer() {
    return new Promise((resolve, reject) => {
        const req = http.get('http://localhost:8080/health', (res) => {
            let data = '';
            res.on('data', chunk => data += chunk);
            res.on('end', () => {
                console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
                console.log('üìä Health check:', JSON.parse(data));
                resolve();
            });
        });
        
        req.on('error', (error) => {
            console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç:', error.message);
            reject(error);
        });
        
        req.setTimeout(5000, () => {
            console.log('‚ùå –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
            req.destroy();
            reject(new Error('Timeout'));
        });
    });
}

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ DataProvider
function testDataProvider() {
    return new Promise((resolve, reject) => {
        const postData = JSON.stringify({
            method: 'fetchData',
            args: ['09.09.2025', 7]
        });
        
        const options = {
            hostname: 'localhost',
            port: 8080,
            path: '/server-method/fetchData',
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(postData)
            }
        };
        
        const req = http.request(options, (res) => {
            let data = '';
            res.on('data', chunk => data += chunk);
            res.on('end', () => {
                const result = JSON.parse(data);
                console.log('‚úÖ DataProvider —Ä–∞–±–æ—Ç–∞–µ—Ç');
                console.log(\`üìä –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: \${result.data.length}\`);
                resolve();
            });
        });
        
        req.on('error', (error) => {
            console.log('‚ùå DataProvider –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', error.message);
            reject(error);
        });
        
        req.write(postData);
        req.end();
    });
}

async function runTests() {
    try {
        await testServer();
        await testDataProvider();
        console.log('\\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
        console.log('üåê –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:8080');
    } catch (error) {
        console.log('\\n‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (npm start)');
    }
}

runTests();
`;

    try {
        await fs.writeFile('scripts/test.js', testScript);
        console.log('   ‚úÖ scripts/test.js —Å–æ–∑–¥–∞–Ω');
    } catch (error) {
        console.log('   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è test.js:', error.message);
    }
}

async function showInstructions() {
    console.log('\nüìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ó–ê–ü–£–°–ö–£:');
    console.log('========================');
    console.log('');
    console.log('1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:');
    console.log('   npm install');
    console.log('');
    console.log('2. –ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤–∞—à –≤–µ–±-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç:');
    console.log('   cp virtualized-table.js frontend/dist/');
    console.log('');
    console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:');
    console.log('   npm start');
    console.log('');
    console.log('4. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä:');
    console.log('   http://localhost:8080');
    console.log('');
    console.log('5. –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('   npm test');
    console.log('');
    console.log('üìÅ –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê:');
    console.log('====================');
    console.log('vaadin-mvc-app/');
    console.log('‚îú‚îÄ‚îÄ server.js                 # MVC —Å–µ—Ä–≤–µ—Ä');
    console.log('‚îú‚îÄ‚îÄ package.json             # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏');
    console.log('‚îú‚îÄ‚îÄ data/');
    console.log('‚îÇ   ‚îî‚îÄ‚îÄ database.json        # JSON –±–∞–∑–∞');
    console.log('‚îú‚îÄ‚îÄ frontend/');
    console.log('‚îÇ   ‚îî‚îÄ‚îÄ dist/');
    console.log('‚îÇ       ‚îî‚îÄ‚îÄ virtualized-table.js  # –í–∞—à –∫–æ–º–ø–æ–Ω–µ–Ω—Ç');
    console.log('‚îî‚îÄ‚îÄ scripts/');
    console.log('    ‚îú‚îÄ‚îÄ setup.js            # –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç');
    console.log('    ‚îî‚îÄ‚îÄ test.js             # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
    console.log('');
    console.log('üîó ENDPOINTS:');
    console.log('=============');
    console.log('‚Ä¢ http://localhost:8080/           # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞');
    console.log('‚Ä¢ http://localhost:8080/health     # Health check');
    console.log('‚Ä¢ http://localhost:8080/debug/data # Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è');
    console.log('');
}

async function main() {
    try {
        await createDirectoryStructure();
        await checkFiles();
        await checkWebComponent();
        await generateTestFile();
        await showInstructions();

        console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        console.log('üöÄ –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É: npm start');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:', error);
        process.exit(1);
    }
}

main();